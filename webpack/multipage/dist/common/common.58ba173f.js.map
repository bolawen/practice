{"version":3,"file":"common/common.58ba173f.js","mappings":"wIAUO,SAASA,EAASC,EAAWC,GAClC,OAAOD,EAAIC,CACb,CASO,SAASC,EAAaC,GAC3B,OAAOC,IAAAA,UAAYD,EACrB,C,eCvBO,SAASE,EAAUC,GACxB,GAAsB,IAAlBA,EAAOC,OAAc,OAAO,EAKhC,IAHA,IAAIC,EAAWF,EAAO,GAClBD,EAAY,EAEPI,EAAI,EAAGA,EAAIH,EAAOC,OAAQE,IAC7BH,EAAOG,GAAKD,EACdA,EAAWF,EAAOG,GACTH,EAAOG,GAAKD,EAAWH,IAChCA,EAAYC,EAAOG,GAAKD,GAI5B,OAAOH,CACT,C,iBAIAK,QAAQC,IAAIN,EADG,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,I,kxBCL/B,QAbA,SAASO,EAAUC,GACjB,GAAIA,EAAIN,QAAU,EAChB,OAAOM,EAGT,IAAMC,EAAQD,EAAIE,KAAKC,MAAMH,EAAIN,OAAS,IACpCU,EAAOJ,EAAIK,QAAO,SAACC,G,OAAMA,EAAIL,C,IAC7BM,EAASP,EAAIK,QAAO,SAACC,G,OAAMA,IAAML,C,IACjCO,EAAQR,EAAIK,QAAO,SAACC,G,OAAMA,EAAIL,C,IAEpC,OAAO,EAAIF,EAAUK,IAAAA,OAAO,EAAGG,GAAQ,EAAGR,EAAUS,IACtD,C,iCCXO,IAAMC,EAAO,WAClB,MAAO,IACT,C","sources":["webpack://dll/./src/common/a.ts","webpack://dll/./src/common/c.ts","webpack://dll/./src/common/d.ts","webpack://dll/./src/common/e.ts"],"sourcesContent":["import _ from \"lodash\";\n\nexport function greet(name: string): string {\n  return `Hello, ${name}! Welcome to the multipage application.`;\n}\n\nexport function sum(a: number, b: number): number {\n  return a + b;\n}\n\nexport function multiply(a: number, b: number): number {\n  return a * b;\n}\nexport function capitalizeWords(sentence: string): string {\n  return _.startCase(_.toLower(sentence));\n}\n\nexport function findMax(numbers: number[]): number {\n  return _.max(numbers) || 0;\n}\n\nexport function deepClone<T>(obj: T): T {\n  return _.cloneDeep(obj);\n}\n","export function maxProfit(prices: number[]): number {\n  if (prices.length === 0) return 0;\n\n  let minPrice = prices[0];\n  let maxProfit = 0;\n\n  for (let i = 1; i < prices.length; i++) {\n    if (prices[i] < minPrice) {\n      minPrice = prices[i];\n    } else if (prices[i] - minPrice > maxProfit) {\n      maxProfit = prices[i] - minPrice;\n    }\n  }\n\n  return maxProfit;\n}\n\n// Example usage:\nconst prices = [7, 1, 5, 3, 6, 4];\nconsole.log(maxProfit(prices)); // Output: 5\n","function quickSort(arr: number[]): number[] {\n  if (arr.length <= 1) {\n    return arr;\n  }\n\n  const pivot = arr[Math.floor(arr.length / 2)];\n  const left = arr.filter((x) => x < pivot);\n  const middle = arr.filter((x) => x === pivot);\n  const right = arr.filter((x) => x > pivot);\n\n  return [...quickSort(left), ...middle, ...quickSort(right)];\n}\n\nexport default quickSort;\n","export const test = () => {\n  return \"测试\";\n};\n"],"names":["multiply","a","b","deepClone","obj","_","maxProfit","prices","length","minPrice","i","console","log","quickSort","arr","pivot","Math","floor","left","filter","x","middle","right","test"],"sourceRoot":""}