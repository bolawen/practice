{"version":3,"sources":["../src/node/cli.ts","../src/node/server/index.ts","../src/node/utils.ts","../src/node/constants.ts","../src/node/hmr.ts","../src/node/plugins/css.ts","../src/node/plugins/assets.ts","../src/node/plugins/resolve.ts","../src/node/plugins/esbuild.ts","../src/node/plugins/clientInject.ts","../src/node/plugins/importAnalysis.ts","../src/node/plugins/index.ts","../src/node/ModuleGraph.ts","../src/node/ws.ts","../src/node/optimizer/index.ts","../src/node/optimizer/scanPlugin.ts","../src/node/optimizer/preBundlePlugin.ts","../src/node/server/middlewares/static.ts","../src/node/server/middlewares/transform.ts","../src/node/server/middlewares/indexHtml.ts","../src/node/pluginContainer.ts"],"sourcesContent":["import cac from 'cac';\nimport { startDevServer } from './server';\n\nconst cli = cac();\n\ncli\n  .command('[root]', 'Run the development server')\n  .alias('serve')\n  .alias('dev')\n  .action(async () => {\n    await startDevServer();\n  });\n\ncli.help();\ncli.parse();\n","import connect from 'connect';\nimport { Plugin } from \"../plugin\";\nimport { normalizePath } from \"../utils\";\nimport { blue, green } from 'picocolors';\nimport { bindingHMREvents } from \"../hmr\";\nimport { resolvePlugins } from '../plugins';\nimport { ModuleGraph } from \"../ModuleGraph\";\nimport { createWebSocketServer } from '../ws';\nimport { optimize } from '../optimizer/index';\nimport chokidar, { FSWatcher } from \"chokidar\";\nimport { staticMiddleware } from \"./middlewares/static\";\nimport { transformMiddleware } from './middlewares/transform';\nimport { indexHtmlMiddleware } from \"./middlewares/indexHtml\";\nimport { createPluginContainer, PluginContainer } from '../pluginContainer';\n\nexport interface ServerContext {\n  root: string;\n  pluginContainer: PluginContainer;\n  app: connect.Server;\n  plugins: Plugin[];\n  moduleGraph: ModuleGraph;\n  ws: { send: (data: any) => void; close: () => void };\n  watcher: FSWatcher;\n}\n\nexport async function startDevServer() {\n  const app = connect();\n  const root = process.cwd();\n  const startTime = Date.now();\n\n  const plugins = resolvePlugins();\n  const pluginContainer = createPluginContainer(plugins);\n  const watcher = chokidar.watch(root, {\n    ignored: [\"**/node_modules/**\", \"**/.git/**\"],\n    ignoreInitial: true,\n  });\n  const ws = createWebSocketServer(app);\n\n  const moduleGraph = new ModuleGraph((url) => pluginContainer.resolveId(url));\n  const serverContext: ServerContext = {\n    root: normalizePath(process.cwd()),\n    app,\n    pluginContainer,\n    plugins,\n    moduleGraph,\n    ws,\n    watcher\n  };\n\n  bindingHMREvents(serverContext);\n\n  for (const plugin of plugins) {\n    if (plugin.configureServer) {\n      await plugin.configureServer(serverContext);\n    }\n  }\n\n\n  app.use(transformMiddleware(serverContext));\n  app.use(indexHtmlMiddleware(serverContext));\n  app.use(staticMiddleware(serverContext.root));\n\n  app.listen(3000, async () => {\n    await optimize(root);\n\n    console.log(\n      green('🚀 No-Bundle 服务已经成功启动!'),\n      `耗时: ${Date.now() - startTime}ms`\n    );\n    console.log(`> 本地访问路径: ${blue('http://localhost:3000')}`);\n  });\n}\n","import os from 'os';\nimport path from 'path';\nimport { QUERY_RE, HASH_RE, JS_TYPES_RE, CLIENT_PUBLIC_PATH } from './constants';\n\nexport function slash(p: string): string {\n  return p.replace(/\\\\/g, '/');\n}\n\nexport const isWindows = os.platform() === 'win32';\nexport const INTERNAL_LIST = [CLIENT_PUBLIC_PATH, \"/@react-refresh\"];\n\nexport function normalizePath(id: string): string {\n  return path.posix.normalize(isWindows ? slash(id) : id);\n}\n\nexport const isJSRequest = (id: string): boolean => {\n  id = cleanUrl(id);\n  if (JS_TYPES_RE.test(id)) {\n    return true;\n  }\n  if (!path.extname(id) && !id.endsWith('/')) {\n    return true;\n  }\n  return false;\n};\n\nexport const cleanUrl = (url: string): string =>\n  url.replace(HASH_RE, '').replace(QUERY_RE, '');\n\nexport const isCSSRequest = (id: string): boolean =>\n  cleanUrl(id).endsWith('.css');\n\nexport function isImportRequest(url: string): boolean {\n  return url.endsWith('?import');\n}\n\nexport function removeImportQuery(url: string): string {\n  return url.replace(/\\?import$/, '');\n}\n\nexport function getShortName(file: string, root: string) {\n  return file.startsWith(root + '/') ? path.posix.relative(root, file) : file;\n}\n\nexport function isInternalRequest(url: string): boolean {\n  return INTERNAL_LIST.includes(url);\n}","import path from 'path';\n\nexport const EXTERNAL_TYPES = [\n  'css',\n  'less',\n  'sass',\n  'scss',\n  'styl',\n  'stylus',\n  'pcss',\n  'postcss',\n  'vue',\n  'svelte',\n  'marko',\n  'astro',\n  'png',\n  'jpe?g',\n  'gif',\n  'svg',\n  'ico',\n  'webp',\n  'avif'\n];\n\nexport const HMR_PORT = 24678;\nexport const HASH_RE = /#.*$/s;\nexport const QUERY_RE = /\\?.*$/s;\nexport const BARE_IMPORT_RE = /^[\\w@][^:]/;\nexport const CLIENT_PUBLIC_PATH = \"/@vite/client\";\nexport const JS_TYPES_RE = /\\.(?:j|t)sx?$|\\.mjs$/;\nexport const DEFAULT_EXTERNALS = ['.tsx', '.ts', '.jsx', 'js'];\nexport const PRE_BUNDLE_DIR = path.join('node_modules', '.m-vite');\n","import { getShortName } from \"./utils\";\nimport { blue, green } from \"picocolors\";\nimport { ServerContext } from \"./server/index\";\n\nexport function bindingHMREvents(serverContext: ServerContext) {\n  const { watcher, ws, root } = serverContext;\n\n  watcher.on(\"change\", async (file) => {\n    console.log(`✨${blue(\"[hmr]\")} ${green(file)} changed`);\n    const { moduleGraph } = serverContext;\n    // 清除模块依赖图中的缓存\n    await moduleGraph.invalidateModule(file);\n    // 向客户端发送更新信息\n    ws.send({\n      type: \"update\",\n      updates: [\n        {\n          type: \"js-update\",\n          timestamp: Date.now(),\n          path: \"/\" + getShortName(file, root),\n          acceptedPath: \"/\" + getShortName(file, root),\n        },\n      ],\n    });\n  });\n}\n","import { Plugin } from '../plugin';\nimport { readFile } from 'fs-extra';\nimport { getShortName } from '../utils';\nimport { ServerContext } from '../server';\nimport { CLIENT_PUBLIC_PATH } from '../constants';\n\nexport function cssPlugin(): Plugin {\n  let serverContext: ServerContext;\n  return {\n    name: 'm-vite:css',\n    configureServer(s) {\n      serverContext = s;\n    },\n    load(id) {\n      if (id.endsWith('.css')) {\n        return readFile(id, 'utf-8');\n      }\n    },\n    async transform(code, id) {\n      if (id.endsWith('.css')) {\n        // 包装成 JS 模块\n        const jsContent = `\nimport { createHotContext as __vite__createHotContext } from \"${CLIENT_PUBLIC_PATH}\";\nimport.meta.hot = __vite__createHotContext(\"/${getShortName(\n          id,\n          serverContext.root\n        )}\");\n\nimport { updateStyle, removeStyle } from \"${CLIENT_PUBLIC_PATH}\"\n  \nconst id = '${id}';\nconst css = '${code.replace(/\\n/g, '')}';\n\nupdateStyle(id, css);\nimport.meta.hot.accept();\nexport default css;\nimport.meta.hot.prune(() => removeStyle(id));`.trim();\n        return {\n          code: jsContent\n        };\n      }\n      return null;\n    }\n  };\n}\n","import { Plugin } from \"../plugin\";\nimport { ServerContext } from \"../server\";\nimport { pathExists, readFile } from \"fs-extra\";\nimport { cleanUrl, getShortName, normalizePath, removeImportQuery } from \"../utils\";\n\nexport function assetPlugin(): Plugin {\n  let serverContext: ServerContext;\n\n  return {\n    name: \"m-vite:asset\",\n    configureServer(s) {\n      serverContext = s;\n    },\n    async load(id) {\n      const cleanedId = removeImportQuery(cleanUrl(id));\n      const resolvedId = `/${getShortName(normalizePath(id), serverContext.root)}`;\n\n      if (cleanedId.endsWith(\".svg\")) {\n        return {\n          code: `export default \"${resolvedId}\"`,\n        };\n      }\n    },\n  };\n}","import path from 'path';\nimport resolve from 'resolve';\nimport { Plugin } from '../plugin';\nimport { pathExists } from 'fs-extra';\nimport { ServerContext } from '../server/index';\nimport { DEFAULT_EXTERNALS } from '../constants';\nimport { cleanUrl, normalizePath } from '../utils';\n\nexport function resolvePlugin(): Plugin {\n  let serverContext: ServerContext;\n  return {\n    name: 'm-vite:resolve',\n    configureServer(s) {\n      serverContext = s;\n    },\n    async resolveId(id: string, importer?: string) {\n      if (path.isAbsolute(id)) {\n        if (await pathExists(id)) {\n          return { id };\n        }\n        id = path.join(serverContext.root, id);\n        if (await pathExists(id)) {\n          return { id };\n        }\n      }\n      else if (id.startsWith('.')) {\n        if (!importer) {\n          throw new Error('`importer` should not be undefined');\n        }\n        const hasExtension = path.extname(id).length > 1;\n        let resolvedId: string;\n        if (hasExtension) {\n          resolvedId = normalizePath(\n            resolve.sync(id, { basedir: path.dirname(importer) })\n          );\n          if (await pathExists(resolvedId)) {\n            return { id: resolvedId };\n          }\n        }\n        else {\n          for (const extname of DEFAULT_EXTERNALS) {\n            try {\n              const withExtension = `${id}${extname}`;\n              resolvedId = normalizePath(\n                resolve.sync(withExtension, {\n                  basedir: path.dirname(importer)\n                })\n              );\n              if (await pathExists(resolvedId)) {\n                return { id: resolvedId };\n              }\n            } catch (e) {\n              continue;\n            }\n          }\n        }\n      }\n      return null;\n    }\n  };\n}\n","import path from 'path';\nimport esbuild from 'esbuild';\nimport { Plugin } from '../plugin';\nimport { readFile } from 'fs-extra';\nimport { isJSRequest } from '../utils';\n\nexport function esbuildTransformPlugin(): Plugin {\n  return {\n    name: 'm-vite:esbuild-transform',\n    async load(id) {\n      if (isJSRequest(id)) {\n        try {\n          const code = await readFile(id, 'utf-8');\n          return code;\n        } catch (e) {\n          return null;\n        }\n      }\n    },\n    async transform(code, id) {\n      if (isJSRequest(id)) {\n        const extname = path.extname(id).slice(1);\n        const { code: transformedCode, map } = await esbuild.transform(code, {\n          target: 'esnext',\n          format: 'esm',\n          sourcemap: true,\n          loader: extname as 'js' | 'ts' | 'jsx' | 'tsx'\n        });\n        return {\n          code: transformedCode,\n          map\n        };\n      }\n      return null;\n    }\n  };\n}\n","import path from 'path';\nimport fs from 'fs-extra';\nimport { Plugin } from '../plugin';\nimport { ServerContext } from '../server/index';\nimport { CLIENT_PUBLIC_PATH, HMR_PORT } from '../constants';\n\nexport function clientInjectPlugin(): Plugin {\n  let serverContext: ServerContext;\n  return {\n    name: 'm-vite:client-inject',\n    configureServer(s) {\n      serverContext = s;\n    },\n    resolveId(id) {\n      if (id === CLIENT_PUBLIC_PATH) {\n        return { id };\n      }\n      return null;\n    },\n    async load(id) {\n      // 加载 HMR 客户端脚本\n      if (id === CLIENT_PUBLIC_PATH) {\n        const realPath = path.join(\n          serverContext.root,\n          'node_modules',\n          'mini-vite',\n          'dist',\n          'client.mjs'\n        );\n        const code = await fs.readFile(realPath, 'utf-8');\n        return {\n          // 替换占位符\n          code: code.replace('__HMR_PORT__', JSON.stringify(HMR_PORT))\n        };\n      }\n    },\n    transformIndexHtml(raw) {\n      // 插入客户端脚本\n      // 即在 head 标签后面加上 <script type=\"module\" src=\"/@vite/client\"></script>\n      // 注: 在 indexHtml 中间件里面会自动执行 transformIndexHtml 钩子\n      return raw.replace(\n        /(<head[^>]*>)/i,\n        `$1<script type=\"module\" src=\"${CLIENT_PUBLIC_PATH}\"></script>`\n      );\n    }\n  };\n}\n","import path from 'path';\nimport resolve from 'resolve';\nimport { Plugin } from '../plugin';\nimport { pathExists } from 'fs-extra';\nimport MagicString from 'magic-string';\nimport { init, parse } from 'es-module-lexer';\nimport { ServerContext } from '../server/index';\nimport {\n  BARE_IMPORT_RE,\n  PRE_BUNDLE_DIR,\n  DEFAULT_EXTERNALS,\n  CLIENT_PUBLIC_PATH\n} from '../constants';\nimport { cleanUrl, getShortName, isInternalRequest, isJSRequest, normalizePath } from '../utils';\n\nexport function importAnalysisPlugin(): Plugin {\n  let serverContext: ServerContext;\n  return {\n    name: 'm-vite:import-analysis',\n    configureServer(s) {\n      serverContext = s;\n    },\n    async transform(code: string, id: string) {\n      if (!isJSRequest(id) || isInternalRequest(id)) {\n        return null;\n      }\n      await init;\n      const importedModules = new Set<string>();\n      const [imports] = parse(code);\n      const ms = new MagicString(code);\n\n      const resolve = async (id: string, importer?: string) => {\n        const resolved = await serverContext.pluginContainer.resolveId(\n          id,\n          normalizePath(importer)\n        );\n        if (!resolved) {\n          return;\n        }\n        let resolvedId = `/${getShortName(resolved.id, serverContext.root)}`;\n        return resolvedId;\n      };\n\n      const { moduleGraph } = serverContext;\n      const curMod = moduleGraph.getModuleById(id)!;\n\n      for (const importInfo of imports) {\n        const { s: modStart, e: modEnd, n: modSource } = importInfo;\n        if (!modSource) continue;\n\n        if (modSource.endsWith('.svg')) {\n          const resolvedUrl = await resolve(modSource, id);\n          ms.overwrite(modStart, modEnd, `${resolvedUrl}?import`);\n          continue;\n        }\n\n        if (BARE_IMPORT_RE.test(modSource)) {\n          const bundlePath = normalizePath(\n            path.join('/', PRE_BUNDLE_DIR, `${modSource}.js`)\n          );\n          ms.overwrite(modStart, modEnd, bundlePath);\n          importedModules.add(bundlePath);\n        } else if (modSource.startsWith('.') || modSource.startsWith('/')) {\n          const resolved = await resolve(modSource, id);\n          if (resolved) {\n            ms.overwrite(modStart, modEnd, resolved);\n            importedModules.add(resolved);\n          }\n        }\n      }\n\n      if (!id.includes('node_modules')) {\n        // 注入 HMR 相关的工具函数\n        ms.prepend(\n          `import { createHotContext as __vite__createHotContext } from \"${CLIENT_PUBLIC_PATH}\";` +\n            `import.meta.hot = __vite__createHotContext(${JSON.stringify(\n              cleanUrl(curMod.url)\n            )});`\n        );\n      }\n\n      moduleGraph.updateModuleInfo(curMod, importedModules);\n\n      return {\n        code: ms.toString(),\n        map: ms.generateMap()\n      };\n    }\n  };\n}\n","import { cssPlugin } from './css';\nimport { Plugin } from '../plugin';\nimport { assetPlugin } from \"./assets\";\nimport { resolvePlugin } from './resolve';\nimport { esbuildTransformPlugin } from './esbuild';\nimport { clientInjectPlugin } from './clientInject';\nimport { importAnalysisPlugin } from './importAnalysis';\n\nexport function resolvePlugins(): Plugin[] {\n  return [\n    clientInjectPlugin(),\n    resolvePlugin(),\n    esbuildTransformPlugin(),\n    importAnalysisPlugin(),\n    cssPlugin(),\n    assetPlugin(),\n  ];\n}\n","import { cleanUrl } from './utils';\nimport { PartialResolvedId, TransformResult } from 'rollup';\n\nexport class ModuleNode {\n  // 资源访问 url\n  url: string;\n  // 资源绝对路径\n  id: string | null = null;\n  importers = new Set<ModuleNode>();\n  importedModules = new Set<ModuleNode>();\n  transformResult: TransformResult | null = null;\n  lastHMRTimestamp = 0;\n  constructor(url: string) {\n    this.url = url;\n  }\n}\n\nexport class ModuleGraph {\n  // 资源 url 到 ModuleNode 的映射表\n  urlToModuleMap = new Map<string, ModuleNode>();\n  // 资源绝对路径到 ModuleNode 的映射表\n  idToModuleMap = new Map<string, ModuleNode>();\n\n  constructor(\n    private resolveId: (url: string) => Promise<PartialResolvedId | null>\n  ) {}\n\n  getModuleById(id: string): ModuleNode | undefined {\n    return this.idToModuleMap.get(id);\n  }\n\n  async getModuleByUrl(rawUrl: string): Promise<ModuleNode | undefined> {\n    const { url } = await this._resolve(rawUrl);\n    return this.urlToModuleMap.get(url);\n  }\n\n  async ensureEntryFromUrl(rawUrl: string): Promise<ModuleNode> {\n    const { url, resolvedId } = await this._resolve(rawUrl);\n    // 首先检查缓存\n    if (this.urlToModuleMap.has(url)) {\n      return this.urlToModuleMap.get(url) as ModuleNode;\n    }\n    // 若无缓存，更新 urlToModuleMap 和 idToModuleMap\n    const mod = new ModuleNode(url);\n    mod.id = resolvedId;\n    this.urlToModuleMap.set(url, mod);\n    this.idToModuleMap.set(resolvedId, mod);\n    return mod;\n  }\n\n  async updateModuleInfo(\n    mod: ModuleNode,\n    importedModules: Set<string | ModuleNode>\n  ) {\n    const prevImports = mod.importedModules;\n    for (const curImports of importedModules) {\n      const dep =\n        typeof curImports === 'string'\n          ? await this.ensureEntryFromUrl(cleanUrl(curImports))\n          : curImports;\n\n      if (dep) {\n        mod.importedModules.add(dep);\n        dep.importers.add(mod);\n      }\n    }\n    // 清除已经不再被引用的依赖\n    for (const prevImport of prevImports) {\n      if (!importedModules.has(prevImport.url)) {\n        prevImport.importers.delete(mod);\n      }\n    }\n  }\n\n  // HMR 触发时会执行这个方法\n  invalidateModule(file: string) {\n    const mod = this.idToModuleMap.get(file);\n    if (mod) {\n      // 更新时间戳\n      mod.lastHMRTimestamp = Date.now();\n      mod.transformResult = null;\n      mod.importers.forEach(importer => {\n        this.invalidateModule(importer.id!);\n      });\n    }\n  }\n\n  private async _resolve(\n    url: string\n  ): Promise<{ url: string; resolvedId: string }> {\n    const resolved = await this.resolveId(url);\n    const resolvedId = resolved?.id || url;\n    return { url, resolvedId };\n  }\n}\n","import connect from 'connect';\nimport { red } from 'picocolors';\nimport { HMR_PORT } from './constants';\nimport { WebSocketServer, WebSocket } from 'ws';\n\nexport function createWebSocketServer(server: connect.Server): {\n  send: (msg: string) => void;\n  close: () => void;\n} {\n  let wss: WebSocketServer;\n  wss = new WebSocketServer({ port: HMR_PORT });\n  wss.on('connection', socket => {\n    socket.send(JSON.stringify({ type: 'connected' }));\n  });\n\n  wss.on('error', (e: Error & { code: string }) => {\n    if (e.code !== 'EADDRINUSE') {\n      console.error(red(`WebSocket server error:\\n${e.stack || e.message}`));\n    }\n  });\n\n  return {\n    send(payload: Object) {\n      const stringified = JSON.stringify(payload);\n      wss.clients.forEach(client => {\n        if (client.readyState === WebSocket.OPEN) {\n          client.send(stringified);\n        }\n      });\n    },\n\n    close() {\n      wss.close();\n    }\n  };\n}\n","import path from 'path';\nimport { build } from 'esbuild';\nimport { green } from 'picocolors';\nimport { scanPlugin } from './scanPlugin';\nimport { PRE_BUNDLE_DIR } from '../constants';\nimport { preBundlePlugin } from './preBundlePlugin';\n\nexport async function optimize(root: string) {\n  const entry = path.resolve(root, 'src/main.tsx');\n  const deps = new Set<string>();\n  await build({\n    entryPoints: [entry],\n    bundle: true,\n    write: false,\n    plugins: [scanPlugin(deps)]\n  });\n  console.log(\n    `${green('需要预构建的依赖')}:\\n${[...deps]\n      .map(green)\n      .map(item => `  ${item}`)\n      .join('\\n')}`\n  );\n\n  // 3. 预构建依赖\n  await build({\n    entryPoints: [...deps],\n    write: true,\n    bundle: true,\n    format: 'esm',\n    splitting: true,\n    outdir: path.resolve(root, PRE_BUNDLE_DIR),\n    plugins: [preBundlePlugin(deps)]\n  });\n}\n","import { Plugin } from 'esbuild';\nimport { BARE_IMPORT_RE, EXTERNAL_TYPES } from '../constants';\n\nexport function scanPlugin(deps: Set<string>): Plugin {\n  return {\n    name: 'esbuild:scan-deps',\n    setup(build) {\n      // 忽略依赖\n      build.onResolve(\n        { filter: new RegExp(`\\\\.(${EXTERNAL_TYPES.join('|')})$`) },\n        resolveInfo => {\n          return {\n            path: resolveInfo.path,\n            external: true\n          };\n        }\n      );\n\n      // 记录依赖\n      build.onResolve(\n        {\n          filter: BARE_IMPORT_RE\n        },\n        resolveInfo => {\n          const { path: id } = resolveInfo;\n          deps.add(id);\n          return {\n            path: id,\n            external: true\n          };\n        }\n      );\n    }\n  };\n}\n","import path from 'path';\nimport fs from 'fs-extra';\nimport resolve from 'resolve';\nimport createDebug from 'debug';\nimport { normalizePath } from '../utils';\nimport { Loader, Plugin } from 'esbuild';\nimport { BARE_IMPORT_RE } from '../constants';\nimport { init, parse } from 'es-module-lexer';\n\nconst debug = createDebug('dev');\n\nexport function preBundlePlugin(deps: Set<string>): Plugin {\n  return {\n    name: 'esbuild:pre-bundle',\n    setup(build) {\n      build.onResolve(\n        {\n          filter: BARE_IMPORT_RE\n        },\n        resolveInfo => {\n          const { path: id, importer } = resolveInfo;\n          const isEntry = !importer;\n          if (deps.has(id)) {\n            return isEntry\n              ? {\n                  path: id,\n                  namespace: 'dep'\n                }\n              : {\n                  path: resolve.sync(id, { basedir: process.cwd() })\n                };\n          }\n        }\n      );\n\n      build.onLoad(\n        {\n          filter: /.*/,\n          namespace: 'dep'\n        },\n        async loadInfo => {\n          await init;\n          const id = loadInfo.path;\n          const root = process.cwd();\n          const entryPath = normalizePath(resolve.sync(id, { basedir: root }));\n          const code = await fs.readFile(entryPath, 'utf-8');\n          const [imports, exports] = await parse(code);\n          let proxyModule = [];\n          if (!imports.length && !exports.length) {\n            const res = require(entryPath);\n            const specifiers = Object.keys(res);\n            proxyModule.push(\n              `export { ${specifiers.join(',')} } from \"${entryPath}\"`,\n              `export default require(\"${entryPath}\")`\n            );\n          } else {\n            if (exports.includes('default')) {\n              proxyModule.push(`import d from \"${entryPath}\";export default d`);\n            }\n            proxyModule.push(`export * from \"${entryPath}\"`);\n          }\n          debug('代理模块内容: %o', proxyModule.join('\\n'));\n          const loader = path.extname(entryPath).slice(1);\n          return {\n            loader: loader as Loader,\n            contents: proxyModule.join('\\n'),\n            resolveDir: root\n          };\n        }\n      );\n    }\n  };\n}\n","import sirv from \"sirv\";\nimport { NextHandleFunction } from \"connect\";\nimport { isImportRequest } from \"../../utils\";\n\nexport function staticMiddleware(root: string): NextHandleFunction {\n  const serveFromRoot = sirv(root, { dev: true });\n  return async (req, res, next) => {\n    if (!req.url) {\n      return;\n    }\n    if (isImportRequest(req.url)) {\n      return;\n    }\n    serveFromRoot(req, res, next);\n  };\n}","import createDebug from 'debug';\nimport { ServerContext } from '../index';\nimport { NextHandleFunction } from 'connect';\nimport {\n  isJSRequest,\n  cleanUrl,\n  isCSSRequest,\n  isImportRequest\n} from '../../utils';\n\nconst debug = createDebug('dev');\n\nexport async function transformRequest(\n  url: string,\n  serverContext: ServerContext\n) {\n  const { moduleGraph, pluginContainer } = serverContext;\n  url = cleanUrl(url);\n\n  let mod = await moduleGraph.getModuleByUrl(url);\n  if (mod && mod.transformResult) {\n    return mod.transformResult;\n  }\n\n  const resolvedResult = await pluginContainer.resolveId(url);\n  let transformResult;\n\n  if (resolvedResult?.id) {\n    let code = await pluginContainer.load(resolvedResult.id);\n    if (typeof code === 'object' && code !== null) {\n      code = code.code;\n    }\n\n    mod = await moduleGraph.ensureEntryFromUrl(url);\n\n    if (code) {\n      transformResult = await pluginContainer.transform(\n        code as string,\n        resolvedResult?.id\n      );\n    }\n  }\n\n  if (mod) {\n    mod.transformResult = transformResult;\n  }\n  \n  return transformResult;\n}\n\nexport function transformMiddleware(\n  serverContext: ServerContext\n): NextHandleFunction {\n  return async (req, res, next) => {\n    if (req.method !== 'GET' || !req.url) {\n      return next();\n    }\n    const url = req.url;\n    debug('transformMiddleware: %s', url);\n    if (isJSRequest(url) || isCSSRequest(url) || isImportRequest(url)) {\n      // 核心编译函数\n      let result = await transformRequest(url, serverContext);\n      if (!result) {\n        return next();\n      }\n      if (result && typeof result !== 'string') {\n        result = result.code;\n      }\n      res.statusCode = 200;\n      res.setHeader('Content-Type', 'application/javascript');\n      return res.end(result);\n    }\n\n    next();\n  };\n}\n","import path from \"path\";\nimport { ServerContext } from \"../index\";\nimport { NextHandleFunction } from \"connect\";\nimport { pathExists, readFile } from \"fs-extra\";\n\nexport function indexHtmlMiddleware(\n  serverContext: ServerContext\n): NextHandleFunction {\n  return async (req, res, next) => {\n    if (req.url === \"/\") {\n      const { root } = serverContext;\n      const indexHtmlPath = path.join(root, \"index.html\");\n      if (await pathExists(indexHtmlPath)) {\n        const rawHtml = await readFile(indexHtmlPath, \"utf8\");\n        let html = rawHtml;\n        for (const plugin of serverContext.plugins) {\n          if (plugin.transformIndexHtml) {\n            html = await plugin.transformIndexHtml(html);\n          }\n        }\n\n        res.statusCode = 200;\n        res.setHeader(\"Content-Type\", \"text/html\");\n        return res.end(html);\n      }\n    }\n    return next();\n  };\n}","import type {\n  LoadResult,\n  PartialResolvedId,\n  SourceDescription,\n  PluginContext as RollupPluginContext,\n  ResolvedId\n} from 'rollup';\n\nexport interface PluginContainer {\n  resolveId(id: string, importer?: string): Promise<PartialResolvedId | null>;\n  load(id: string): Promise<LoadResult | null>;\n  transform(code: string, id: string): Promise<SourceDescription | null>;\n}\n\nexport const createPluginContainer = (plugins: Plugin[]): PluginContainer => {\n  class Context implements RollupPluginContext {\n    async resolve(id: string, importer?: string) {\n      let out = await pluginContainer.resolveId(id, importer);\n      if (typeof out === 'string') out = { id: out };\n      return out as ResolvedId | null;\n    }\n  }\n  const pluginContainer: PluginContainer = {\n    async resolveId(id: string, importer?: string) {\n      const ctx = new Context() as any;\n      for (const plugin of plugins) {\n        if (plugin.resolveId) {\n          const newId = await plugin.resolveId.call(ctx as any, id, importer);\n          if (newId) {\n            id = typeof newId === 'string' ? newId : newId.id;\n            return { id };\n          }\n        }\n      }\n      return null;\n    },\n    async load(id) {\n      const ctx = new Context() as any;\n      for (const plugin of plugins) {\n        if (plugin.load) {\n          const result = await plugin.load.call(ctx, id);\n          if (result) {\n            return result;\n          }\n        }\n      }\n      return null;\n    },\n    async transform(code, id) {\n      const ctx = new Context() as any;\n      for (const plugin of plugins) {\n        if (plugin.transform) {\n          const result = await plugin.transform.call(ctx, code, id);\n          if (!result) continue;\n          if (typeof result === 'string') {\n            code = result;\n          } else if (result.code) {\n            code = result.code;\n          }\n        }\n      }\n      return { code };\n    }\n  };\n\n  return pluginContainer;\n};\n"],"mappings":"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","names":["import_path","path","os","path","import_picocolors","import_path","import_fs_extra","path","resolve","import_path","import_fs_extra","path","esbuild","import_path","import_fs_extra","path","fs","import_path","MagicString","resolve","id","path","import_picocolors","import_path","import_esbuild","import_picocolors","build","import_path","import_fs_extra","import_resolve","import_es_module_lexer","createDebug","build","resolve","fs","exports","path","path","sirv","import_debug","debug","createDebug","import_path","import_fs_extra","path","connect","chokidar","cac"]}