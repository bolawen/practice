{"version":3,"sources":["../src/client/client.ts"],"sourcesContent":["console.log(\"[vite] connecting...\");\n\n// 1. 创建客户端 WebSocket 实例\n// 其中的 __HMR_PORT__ 之后会被 no-bundle 服务编译成具体的端口号\nconst socket = new WebSocket(`ws://localhost:__HMR_PORT__`, \"vite-hmr\");\n\n// 2. 接收服务端的更新信息\nsocket.addEventListener(\"message\", async ({ data }) => {\n  handleMessage(JSON.parse(data)).catch(console.error);\n});\n\ninterface Update {\n  type: \"js-update\" | \"css-update\";\n  path: string;\n  acceptedPath: string;\n  timestamp: number;\n}\n\n// 3. 根据不同的更新类型进行更新\nasync function handleMessage(payload: any) {\n  switch (payload.type) {\n    case \"connected\":\n      console.log(`[vite] connected.`);\n      // 心跳检测\n      setInterval(() => socket.send(\"ping\"), 1000);\n      break;\n\n    case \"update\":\n      // 进行具体的模块更新\n      payload.updates.forEach((update: Update) => {\n        if (update.type === \"js-update\") {\n          fetchUpdate(update);\n        }\n      });\n      break;\n  }\n}\n\ninterface HotModule {\n  id: string;\n  callbacks: HotCallback[];\n}\n\ninterface HotCallback {\n  deps: string[];\n  fn: (modules: object[]) => void;\n}\n\n// HMR 模块表\nconst hotModulesMap = new Map<string, HotModule>();\n// 不在生效的模块表\nconst pruneMap = new Map<string, (data: any) => void | Promise<void>>();\n\nexport const createHotContext = (ownerPath: string) => {\n  const mod = hotModulesMap.get(ownerPath);\n  if (mod) {\n    mod.callbacks = [];\n  }\n\n  function acceptDeps(deps: string[], callback: any) {\n    const mod: HotModule = hotModulesMap.get(ownerPath) || {\n      id: ownerPath,\n      callbacks: [],\n    };\n    // callbacks 属性存放 accept 的依赖、依赖改动后对应的回调逻辑\n    mod.callbacks.push({\n      deps,\n      fn: callback,\n    });\n\n    hotModulesMap.set(ownerPath, mod);\n  }\n\n  return {\n    accept(deps: any) {\n      // 这里仅考虑接受自身模块更新的情况\n      // import.meta.hot.accept()\n      if (typeof deps === \"function\" || !deps) {\n        acceptDeps([ownerPath], ([mod]) => deps && deps(mod));\n      }\n    },\n    // 模块不再生效的回调\n    // import.meta.hot.prune(() => {})\n    prune(cb: (data: any) => void) {\n      pruneMap.set(ownerPath, cb);\n    },\n  };\n};\n\n\nasync function fetchUpdate({ path, timestamp }: Update) {\n  const mod = hotModulesMap.get(path);\n  if (!mod) return;\n\n  const moduleMap = new Map();\n  const modulesToUpdate = new Set<string>();\n  modulesToUpdate.add(path);\n\n  await Promise.all(\n    Array.from(modulesToUpdate).map(async (dep) => {\n      const [path, query] = dep.split(`?`);\n      try {\n        // 通过动态 import 拉取最新模块\n        const newMod = await import(\n          path + `?t=${timestamp}${query ? `&${query}` : \"\"}`\n        );\n        moduleMap.set(dep, newMod);\n      } catch (e) {}\n    })\n  );\n\n  return () => {\n    // 拉取最新模块后执行更新回调\n    for (const { deps, fn } of mod.callbacks) {\n      fn(deps.map((dep: any) => moduleMap.get(dep)));\n    }\n    console.log(`[vite] hot updated: ${path}`);\n  };\n}\n\nconst sheetsMap = new Map();\n\nexport function updateStyle(id: string, content: string) {\n  let style = sheetsMap.get(id);\n  if (!style) {\n    // 添加 style 标签\n    style = document.createElement(\"style\");\n    style.setAttribute(\"type\", \"text/css\");\n    style.innerHTML = content;\n    document.head.appendChild(style);\n  } else {\n    // 更新 style 标签内容\n    style.innerHTML = content;\n  }\n  sheetsMap.set(id, style);\n}\n\nexport function removeStyle(id: string): void {\n  const style = sheetsMap.get(id);\n  if (style) {\n    document.head.removeChild(style);\n  }\n  sheetsMap.delete(id);\n}"],"mappings":";AAAA,QAAQ,IAAI,sBAAsB;AAIlC,IAAM,SAAS,IAAI,UAAU,+BAA+B,UAAU;AAGtE,OAAO,iBAAiB,WAAW,OAAO,EAAE,KAAK,MAAM;AACrD,gBAAc,KAAK,MAAM,IAAI,CAAC,EAAE,MAAM,QAAQ,KAAK;AACrD,CAAC;AAUD,eAAe,cAAc,SAAc;AACzC,UAAQ,QAAQ,MAAM;AAAA,IACpB,KAAK;AACH,cAAQ,IAAI,mBAAmB;AAE/B,kBAAY,MAAM,OAAO,KAAK,MAAM,GAAG,GAAI;AAC3C;AAAA,IAEF,KAAK;AAEH,cAAQ,QAAQ,QAAQ,CAAC,WAAmB;AAC1C,YAAI,OAAO,SAAS,aAAa;AAC/B,sBAAY,MAAM;AAAA,QACpB;AAAA,MACF,CAAC;AACD;AAAA,EACJ;AACF;AAaA,IAAM,gBAAgB,oBAAI,IAAuB;AAEjD,IAAM,WAAW,oBAAI,IAAiD;AAE/D,IAAM,mBAAmB,CAAC,cAAsB;AACrD,QAAM,MAAM,cAAc,IAAI,SAAS;AACvC,MAAI,KAAK;AACP,QAAI,YAAY,CAAC;AAAA,EACnB;AAEA,WAAS,WAAW,MAAgB,UAAe;AACjD,UAAMA,OAAiB,cAAc,IAAI,SAAS,KAAK;AAAA,MACrD,IAAI;AAAA,MACJ,WAAW,CAAC;AAAA,IACd;AAEA,IAAAA,KAAI,UAAU,KAAK;AAAA,MACjB;AAAA,MACA,IAAI;AAAA,IACN,CAAC;AAED,kBAAc,IAAI,WAAWA,IAAG;AAAA,EAClC;AAEA,SAAO;AAAA,IACL,OAAO,MAAW;AAGhB,UAAI,OAAO,SAAS,cAAc,CAAC,MAAM;AACvC,mBAAW,CAAC,SAAS,GAAG,CAAC,CAACA,IAAG,MAAM,QAAQ,KAAKA,IAAG,CAAC;AAAA,MACtD;AAAA,IACF;AAAA;AAAA;AAAA,IAGA,MAAM,IAAyB;AAC7B,eAAS,IAAI,WAAW,EAAE;AAAA,IAC5B;AAAA,EACF;AACF;AAGA,eAAe,YAAY,EAAE,MAAM,UAAU,GAAW;AACtD,QAAM,MAAM,cAAc,IAAI,IAAI;AAClC,MAAI,CAAC;AAAK;AAEV,QAAM,YAAY,oBAAI,IAAI;AAC1B,QAAM,kBAAkB,oBAAI,IAAY;AACxC,kBAAgB,IAAI,IAAI;AAExB,QAAM,QAAQ;AAAA,IACZ,MAAM,KAAK,eAAe,EAAE,IAAI,OAAO,QAAQ;AAC7C,YAAM,CAACC,OAAM,KAAK,IAAI,IAAI,MAAM,GAAG;AACnC,UAAI;AAEF,cAAM,SAAS,MAAM,OACnBA,QAAO,MAAM,SAAS,GAAG,QAAQ,IAAI,KAAK,KAAK,EAAE;AAEnD,kBAAU,IAAI,KAAK,MAAM;AAAA,MAC3B,SAAS,GAAG;AAAA,MAAC;AAAA,IACf,CAAC;AAAA,EACH;AAEA,SAAO,MAAM;AAEX,eAAW,EAAE,MAAM,GAAG,KAAK,IAAI,WAAW;AACxC,SAAG,KAAK,IAAI,CAAC,QAAa,UAAU,IAAI,GAAG,CAAC,CAAC;AAAA,IAC/C;AACA,YAAQ,IAAI,uBAAuB,IAAI,EAAE;AAAA,EAC3C;AACF;AAEA,IAAM,YAAY,oBAAI,IAAI;AAEnB,SAAS,YAAY,IAAY,SAAiB;AACvD,MAAI,QAAQ,UAAU,IAAI,EAAE;AAC5B,MAAI,CAAC,OAAO;AAEV,YAAQ,SAAS,cAAc,OAAO;AACtC,UAAM,aAAa,QAAQ,UAAU;AACrC,UAAM,YAAY;AAClB,aAAS,KAAK,YAAY,KAAK;AAAA,EACjC,OAAO;AAEL,UAAM,YAAY;AAAA,EACpB;AACA,YAAU,IAAI,IAAI,KAAK;AACzB;AAEO,SAAS,YAAY,IAAkB;AAC5C,QAAM,QAAQ,UAAU,IAAI,EAAE;AAC9B,MAAI,OAAO;AACT,aAAS,KAAK,YAAY,KAAK;AAAA,EACjC;AACA,YAAU,OAAO,EAAE;AACrB;","names":["mod","path"]}